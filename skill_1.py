# -*- coding: utf-8 -*-
"""Skill-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f5UFiGguegDcUdrn1f0PmMInh0escZod
"""

import pandas as pd

import numpy as np

from sklearn.model_selection import train_test_split

from sklearn.ensemble import RandomForestRegressor

from sklearn.metrics import mean_absolute_error, mean_squared_error

from sklearn.preprocessing import OneHotEncoder, StandardScaler

from sklearn.compose import ColumnTransformer

from sklearn.pipeline import Pipeline

train_data = pd.DataFrame({
    'Id': [1, 2, 3, 4, 5],
    'GroundLivingArea': [1500, 2000, 1200, 1800, 2500],
    'Neighborhood': ['OldTown', 'NAmes', 'BrkSide', 'Edwards', 'CollgCr'],
    'OverallQuality': [7, 8, 6, 7, 9],
    'GarageArea': [300, 400, 200, 350, 500],
    'HouseholdValue': [200000, 250000, 180000, 220000, 300000],
    'Price': [210000, 270000, 200000, 240000, 330000]
})
test_data = pd.DataFrame({
    'Id': [6, 7, 8, 9, 10],
    'GroundLivingArea': [1600, 1900, 1400, 2200, 3000],
    'Neighborhood': ['OldTown', 'NAmes', 'BrkSide', 'Edwards', 'CollgCr'],
    'OverallQuality': [7, 8, 6, 8, 9],
    'GarageArea': [300, 450, 250, 400, 550],
    'HouseholdValue': [210000, 260000, 190000, 270000, 350000]
})

features = ['GroundLivingArea', 'Neighborhood', 'OverallQuality', 'GarageArea', 'HouseholdValue']
target = 'Price'

X = train_data[features]
y = train_data[target]

X_test = test_data[features]

numerical_cols = ['GroundLivingArea', 'OverallQuality', 'GarageArea', 'HouseholdValue']
categorical_cols = ['Neighborhood']

preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_cols),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
    ])

model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
])

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

model.fit(X_train, y_train)

y_val_pred = model.predict(X_val)
mae = mean_absolute_error(y_val, y_val_pred)
rmse = np.sqrt(mean_squared_error(y_val, y_val_pred))

print("Validation Results:")
print(f"Mean Absolute Error (MAE): {mae}")
print(f"Root Mean Squared Error (RMSE): {rmse}")

# Predict on the test dataset
test_data['Predicted Price'] = model.predict(X_test)

# Display results
print("\nTest Predictions:")
print(test_data[['Id', 'Predicted Price']])

# Save predictions to a CSV file
test_data[['Id', 'Predicted Price']].to_csv('predicted_test_data.csv', index=False)
print("\nPredictions saved to 'predicted_test_data.csv'.")